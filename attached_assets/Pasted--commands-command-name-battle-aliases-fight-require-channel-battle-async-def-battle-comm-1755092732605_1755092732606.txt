@commands.command(name='battle', aliases=['fight'])
@require_channel("battle")
async def battle_command(ctx, opponent: Optional[discord.Member] = None):
    """Challenge another user to a beast battle"""

    # Enhanced error: No opponent provided
    if opponent is None:
        embed = discord.Embed(color=0xFF6B6B)
        embed.add_field(name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        value="# ❌ ⚔️ **IMMORTAL BEAST ARENA** ⚔️ ❌\n" +
                        "## 🚫 **INVALID BATTLE REQUEST** 🚫\n" +
                        "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        inline=False)
        emb�ed.add_field(
            name="📋 **Battle Instructions**",
            value=f"```yaml\n" +
            f"Command Format: {ctx.bot.config.prefix}battle @opponent\n" +
            f"Example Usage: {ctx.bot.config.prefix}battle @username\n" +
            f"Required: Valid opponent mention\n" + f"```",
            inline=False)
        embed.add_field(
            name="💡 **How to Start a Battle**",
            value="🎯 **Step 1:** Type `!battle` followed by @ mention\n" +
            "🎯 **Step 2:** Click on someone's name to mention them\n" +
            "🎯 **Step 3:** Press Enter to send the challenge!\n\n" +
            "**Example:** `!battle @FriendName`",
            inline=False)
        embed.set_footer(
            text="⚔️ IMMORTAL BEAST ARENA • Choose your opponent wisely!")
        embed.timestamp = discord.utils.utcnow()
        await ctx.send(embed=embed)
        return

    # Enhanced error: Opponent is a bot
    if opponent.bot:
        embed = discord.Embed(color=0xFF8C42)
        embed.add_field(name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        value="# 🤖 ⚔️ **IMMORTAL BEAST ARENA** ⚔️ 🤖\n" +
                        "## ⚠️ **INVALID OPPONENT TYPE** ⚠️\n" +
                        "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        inline=False)
        embed.add_field(name="🤖 **Bot Detection**",
                        value=f"```diff\n" +
                        f"- Target: {opponent.display_name}\n" +
                        f"- Type: Discord Bot\n" +
                        f"- Status: Cannot participate in battles\n" + f"```",
                        inline=False)
        embed.add_field(name="👥 **Valid Opponents**",
                        value="✅ **Human players** in this server\n" +
                        "✅ **Active members** with beast collections\n" +
                        "✅ **Users** who have adopted beasts\n\n" +
                        "❌ **Discord bots** (like me!)\n" +
                        "❌ **Webhook users**",
                        inline=False)
        embed.add_field(
            name="🎯 **Suggestion**",
            value=f"Try challenging a human player instead!\n" +
            f"Use `{ctx.bot.config.prefix}leaderboard` to see active players.",
            inline=False)
        embed.set_footer(
            text="⚔️ IMMORTAL BEAST ARENA • Only humans can command beasts!")
        embed.timestamp = discord.utils.utcnow()
        await ctx.send(embed=embed)
        return

    # Enhanced error: Trying to battle yourself
    if opponent.id == ctx.author.id:
        embed = discord.Embed(color=0xFFB347)
        embed.add_field(name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        value="# 🪞 ⚔️ **IMMORTAL BEAST ARENA** ⚔️ 🪞\n" +
                        "## 🤔 **SELF-CHALLENGE DETECTED** 🤔\n" +
                        "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        inline=False)
        embed.add_field(name="🪞 **Mirror Match Analysis**",
                        value="```yaml\n" + "Challenger: " +
                        ctx.author.display_name + "\n" + "Opponent:   " +
                        ctx.author.display_name + "\n" +
                        "Result:     Paradox Detected\n" + "```",
                        inline=False)
        embed.add_field(
            name="🧠 **Battle Philosophy**",
            value="🌟 **Training** happens through self-reflection\n" +
            "⚔️ **Combat** requires worthy opponents\n" +
            "🏆 **Glory** comes from defeating others\n" +
            "🤝 **Growth** comes from facing challenges",
            inline=False)
        embed.add_field(
            name="🎯 **Find an Opponent**",
            value=f"📊 `{ctx.bot.config.prefix}leaderboard` - See top players\n"
            + f"👥 `{ctx.bot.config.prefix}serverstats` - View active users\n" +
            f"🔍 Look around the server for other beast masters!",
            inline=False)
        embed.set_footer(
            text=
            "⚔️ IMMORTAL BEAST ARENA • Challenge others to prove your worth!")
        embed.timestamp = discord.utils.utcnow()
        await ctx.send(embed=embed)
        return

    # Get user beasts
    challenger_beasts = await ctx.bot.db.get_user_beasts(ctx.author.id)
    opponent_beasts = await ctx.bot.db.get_user_beasts(opponent.id)

    # Enhanced error: Challenger has no beasts
    if not challenger_beasts:
        embed = discord.Embed(color=0x845EC2)
        embed.add_field(name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        value="# 📦 ⚔️ **IMMORTAL BEAST ARENA** ⚔️ 📦\n" +
                        "## 🚫 **NO BEASTS AVAILABLE** 🚫\n" +
                        "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        inline=False)
        embed.add_field(
            name="📊 **Your Beast Collection**",
            value="```diff\n" + f"- Trainer: {ctx.author.display_name}\n" +
            "- Beasts: 0/6\n" + "- Status: No battle-ready beasts\n" + "```",
            inline=False)
        embed.add_field(
            name="🎯 **How to Get Your First Beast**",
            value=
            f"🐾 `{ctx.bot.config.prefix}adopt` - Adopt a random beast (every 2 days)\n"
            +
            f"🌟 `{ctx.bot.config.prefix}catch` - Catch wild beasts when they spawn\n"
            + f"💰 `{ctx.bot.config.prefix}stone` - Get daily beast stones\n" +
            f"👁️ `{ctx.bot.config.prefix}nextspawn` - Check when beasts spawn",
            inline=False)
        embed.add_field(name="🎮 **Beast Master Journey**",
                        value="**Step 1:** 🏠 Adopt your first companion\n" +
                        "**Step 2:** 🎯 Catch wild beasts in spawn channel\n" +
                        "**Step 3:** 💪 Train and level up your beasts\n" +
                        "**Step 4:** ⚔️ Return here to battle!",
                        inline=False)
        embed.set_footer(
            text=
            "⚔️ IMMORTAL BEAST ARENA • Every legend starts with a single beast!"
        )
        embed.timestamp = discord.utils.utcnow()
        await ctx.send(embed=embed)
        return

    # Enhanced error: Opponent has no beasts
    if not opponent_beasts:
        embed = discord.Embed(color=0xFF6B9D)
        embed.add_field(name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        value="# 👤 ⚔️ **IMMORTAL BEAST ARENA** ⚔️ 👤\n" +
                        "## 😔 **OPPONENT NOT READY** 😔\n" +
                        "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        inline=False)
        embed.add_field(name="🔍 **Target Analysis**",
                        value=f"```yaml\n" +
                        f"Opponent: {opponent.display_name}\n" +
                        f"Beast Count: 0\n" + f"Battle Ready: No\n" +
                        f"Status: Needs to build collection\n" + f"```",
                        inline=False)
        embed.add_field(
            name="💬 **Message for " + opponent.display_name + "**",
            value=f"Hey {opponent.mention}! 👋\n\n" +
            f"🎯 **{ctx.author.display_name} wants to battle you!**\n" +
            f"🐾 Use `{ctx.bot.config.prefix}adopt` to get your first beast\n" +
            f"⚔️ Then you can accept battle challenges!",
            inline=False)
        embed.add_field(
            name="🔄 **Alternative Opponents**",
            value=
            f"📊 `{ctx.bot.config.prefix}leaderboard` - Find active beast masters\n"
            + f"👥 Look for users with beast collections\n" +
            f"🎯 Challenge someone who's ready to fight!",
            inline=False)
        embed.set_footer(
            text=
            "⚔️ IMMORTAL BEAST ARENA • Help others start their beast journey!")
        embed.timestamp = discord.utils.utcnow()
        await ctx.send(embed=embed)
        return

    # Let challenger select their beast
    challenger_beast = await select_beast_for_battle(ctx, ctx.author,
                                                     challenger_beasts, "your")
    if not challenger_beast:
        embed = discord.Embed(color=0xFFA07A)
        embed.add_field(name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
       �                 value="# ⏰ ⚔️ **IMMORTAL BEAST ARENA** ⚔️ ⏰\n" +
                        "## 🚫 **BATTLE CANCELLED** 🚫\n" +
                        "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        inline=False)
        embed.add_field(name="⏱️ **Selection Timeout**",
                        value=f"```diff\n" +
                        f"- Challenger: {ctx.author.display_name}\n" +
                        f"- Action: Beast selection\n" +
                        f"- Result: No response (30s timeout)\n" +
                        f"- Status: Battle cancelled\n" + f"```",
                        inline=False)
        embed.add_field(
            name="💡 **What Happened?**",
            value="🎯 You were asked to select a beast for battle\n" +
            "⏰ The selection window timed out after 30 seconds\n" +
            "🚫 The battle was automatically cancelled\n" +
            "🔄 You can try challenging again anytime!",
            inline=False)
        embed.add_field(name="🎮 **Battle Tips**",
                        value="⚡ **Respond quickly** when selecting beasts\n" +
                        "📱 **Stay active** during the battle setup\n" +
                        "🎯 **Choose wisely** - pick your strongest beast!\n" +
                        "❤️ **Check HP** - heal damaged beasts first",
                        inline=False)
        embed.set_footer(
            text="⚔️ IMMORTAL BEAST ARENA • Quick decisions lead to victory!")
        embed.timestamp = discord.utils.utcnow()
        await ctx.send(embed=embed)
        return

    # Let opponent select their beast
    opponent_beast = await select_beast_for_battle(
        ctx, opponent, opponent_beasts, f"{opponent.display_name}'s")
    if not opponent_beast:
        embed = discord.Embed(color=0xDDA0DD)
        embed.add_field(name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        value="# 👤 ⚔️ **IMMORTAL BEAST ARENA** ⚔️ 👤\n" +
                        "## 😞 **OPPONENT WITHDREW** 😞\n" +
                        "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        inline=False)
        embed.add_field(name="🏃 **Battle Withdrawal**",
                        value=f"```yaml\n" +
                        f"Challenger: {ctx.author.display_name}\n" +
                        f"Opponent: {opponent.display_name}\n" +
                        f"Status: Opponent didn't select a beast\n" +
                        f"Result: Battle cancelled\n" + f"```",
                        inline=False)
        embed.add_field(
            name="🤔 **What Happened?**",
            value=f"⏰ **{opponent.display_name}** was asked to select a beast\n"
            + "📱 They didn't respond within 30 seconds\n" +
            "🚫 The battle was automatically cancelled\n" +
            "💭 They might be busy or away from keyboard",
            inline=False)
        embed.add_field(
            name="🔄 **Next Steps**",
            value=f"💬 **Message them** to arrange a better time\n" +
            f"🎯 **Try again later** when they're more active\n" +
            f"👥 **Find another opponent** who's ready to battle\n" +
            f"📊 Check `{ctx.bot.config.prefix}leaderboard` for active players",
            inline=False)
        embed.set_footer(
            text="⚔️ IMMORTAL BEAST ARENA • Patience leads to epic battles!")
        embed.timestamp = discord.utils.utcnow()
        await ctx.send(embed=embed)
        return

    if challenger_beast[1].stats.hp < challenger_beast[1].stats.max_hp * 0.1:
        embed = discord.Embed(
            title="⚠️ Beast Too Injured",
            description=
            f"{challenger_beast[1].name} is too injured to battle! Heal them first.",
            color=0xFF8800)
        await ctx.send(embed=embed)
        return

    # Check if opponent's beast is too injured to battle
    if opponent_beast[1].stats.hp < opponent_beast[1].stats.max_hp * 0.1:
        embed = discord.Embed(
            title="⚠️ Opponent's Beast Too Injured",
            description=
            f"{opponent_beast[1].name} is too injured to battle! They need to heal first.",
            color=0xFF8800)
        await ctx.send(embed=embed)
        return

    # Simulate the battle
    battle_result = await ctx.bot.battle_engine.simulate_battle(
        challenger_beast[1], opponent_beast[1])

    # Determine winners and update stats
    challenger_user = await ctx.bot.get_or_create_user(ctx.author.id,
                                                       str(ctx.author))
    opponent_user = await ctx.bot.get_or_create_user(opponent.id,
                                                     str(opponent))

    challenger_user.total_battles += 1
    opponent_user.total_battles += 1

    if battle_result['winner'] == challenger_beast[1].name:
        challenger_user.wins += 1
        opponent_user.losses += 1
        winner_user = ctx.author
        loser_user = opponent
    elif battle_result['winner'] == opponent_beast[1].name:
        opponent_user.wins += 1
        challenger_user.losses += 1
        winner_user = opponent
        loser_user = ctx.author
    else:
        winner_user = None
        loser_user = None

    await ctx.bot.db.update_user(challenger_user)
    await ctx.bot.db.update_user(opponent_user)

    # ADD THE HP PERSISTENCE FIX HERE - after user stats, before embed
    # Apply battle damage to original beasts
    challenger_beast_obj = challenger_beast[1]
    opponent_beast_obj = opponent_beast[1]

    # Update HP based on battle results
    challenger_final_hp = battle_result['final_hp'][challenger_beast_obj.name]
    opponent_final_hp = battle_result['final_hp'][opponent_beast_obj.name]

    challenger_beast_obj.stats.hp = challenger_final_hp
    opponent_beast_obj.stats.hp = opponent_final_hp

    # Save the damaged beasts to database
    await ctx.bot.db.update_beast(challenger_beast[0], challenger_beast_obj)
    await ctx.bot.db.update_beast(opponent_beast[0], opponent_beast_obj)

    if battle_result['result'] == BattleResult.WIN:
        if winner_user == ctx.author:
            color = 0x00FF7F  # Bright victory green
            title_icon = "🏆"
            result_text = "**VICTORY**"
            victory_gradient = "🟢🟡🟠🔴"
        else:
            color = 0xFF4500  # Dramatic defeat orange-red
            title_icon = "💀"
            result_text = "**DEFEAT**"
            victory_gradient = "🔴🟠🟡🟢"
    elif battle_result['result'] == BattleResult.LOSS:
        if winner_user == ctx.author:
            color = 0x00FF7F
            title_icon = "🏆"
            result_text = "**VICTORY**"
            victory_gradient = "🟢🟡🟠🔴"
        else:
            color = 0xFF4500
            title_icon = "💀"
            result_text = "**DEFEAT**"
            victory_gradient = "🔴🟠🟡🟢"
    else:
        color = 0xFFD700  # Golden draw
        title_icon = "⚖️"
        result_text = "**DRAW**"
        victory_gradient = "🟡🟠🟡🟠"

    # Create the main embed with cinematic styling
    embed = discord.Embed(color=color)

    # Epic header design
    embed.add_field(
        name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
        value=f"# {title_icon} ⚔️ **IMMORTAL BEAST ARENA** ⚔️ {title_icon}\n" +
        f"## {victory_gradient} {result_text} {victory_gradient[::-1]}\n" +
        f"━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
        inline=False)

    # Fighter showcase with detailed stats
    embed.add_field(
        name="🥊 **COMBATANTS**",
        value=f"### 🔵 {ctx.author.display_name}'s Champion\n" + f"```ansi\n" +
        f"\u001b[1;36m{challenger_beast_obj.name}\u001b[0m {challenger_beast_obj.rarity.emoji}\n"
        +
        f"Level: {challenger_beast_obj.stats.level} | Power: {challenger_beast_obj.power_level:,}\n"
        +
        f"ATK: {challenger_beast_obj.stats.attack} | DEF: {challenger_beast_obj.stats.defense} | SPD: {challenger_beast_obj.stats.speed}\n"
        + f"```\n" + f"### 🔴 {opponent.display_name}'s Champion\n" +
        f"```ansi\n" +
        f"\u001b[1;31m{opponent_beast_obj.name}\u001b[0m {opponent_beast_obj.rarity.emoji}\n"
        +
        f"Level: {opponent_beast_obj.stats.level} | Power: {opponent_be�ast_obj.power_level:,}\n"
        +
        f"ATK: {opponent_beast_obj.stats.attack} | DEF: {opponent_beast_obj.stats.defense} | SPD: {opponent_beast_obj.stats.speed}\n"
        + f"```",
        inline=False)

    # Battle analytics with enhanced visuals
    battle_intensity = "🔥🔥🔥" if battle_result[
        'turns'] > 15 else "🔥🔥" if battle_result['turns'] > 8 else "🔥"
    battle_type = "LEGENDARY EPIC" if battle_result[
        'turns'] > 20 else "EPIC CLASH" if battle_result[
            'turns'] > 12 else "QUICK STRIKE" if battle_result[
                'turns'] <= 5 else "STANDARD DUEL"

    embed.add_field(name="📊 **BATTLE ANALYTICS**",
                    value=f"```yaml\n" + f"Battle Type: {battle_type}\n" +
                    f"Intensity:  {battle_intensity}\n" +
                    f"Duration:   {battle_result['turns']} rounds\n" +
                    f"Combat ID:  #{challenger_user.total_battles:04d}\n" +
                    f"```",
                    inline=True)

    # Championship results
    if winner_user:
        winner_beast = battle_result['winner']
        winner_hp = battle_result['final_hp'][winner_beast]

        embed.add_field(
            name="👑 **CHAMPION**",
            value=f"```diff\n" + f"+ {winner_user.display_name}\n" +
            f"+ {winner_beast}\n" + f"+ {winner_hp} HP Remaining\n" +
            f"```\n" + f"🏆 **Victory Achieved!**",
            inline=True)
    else:
        embed.add_field(name="⚖️ **STALEMATE**",
                        value=f"```css\n" + f"[Both Warriors Stand]\n" +
                        f"[Honor Preserved]\n" + f"[Rematch Awaited]\n" +
                        f"```\n" + f"🤝 **Honorable Draw**",
                        inline=True)

    # Advanced health visualization
    def create_premium_health_bar(current_hp, max_hp, length=8):
        if max_hp == 0:
            return "💀" * length

        percentage = current_hp / max_hp
        filled = int(percentage * length)

        if percentage > 0.7:
            bar_char = "🟢"
        elif percentage > 0.4:
            bar_char = "🟡"
        elif percentage > 0.1:
            bar_char = "🟠"
        else:
            bar_char = "🔴"

        if current_hp <= 0:
            return "💀" * length

        empty_char = "⬛"
        return bar_char * filled + empty_char * (length - filled)

    challenger_final_hp = battle_result['final_hp'][challenger_beast_obj.name]
    opponent_final_hp = battle_result['final_hp'][opponent_beast_obj.name]

    challenger_health_bar = create_premium_health_bar(
        challenger_final_hp, challenger_beast_obj.stats.max_hp)
    opponent_health_bar = create_premium_health_bar(
        opponent_final_hp, opponent_beast_obj.stats.max_hp)

    challenger_hp_percent = int(
        (challenger_final_hp / challenger_beast_obj.stats.max_hp) *
        100) if challenger_beast_obj.stats.max_hp > 0 else 0
    opponent_hp_percent = int(
        (opponent_final_hp / opponent_beast_obj.stats.max_hp) *
        100) if opponent_beast_obj.stats.max_hp > 0 else 0

    embed.add_field(
        name="❤️ **POST-BATTLE STATUS**",
        value=f"### {challenger_beast_obj.name}\n" +
        f"{challenger_health_bar} `{challenger_hp_percent}%`\n" +
        f"`{challenger_final_hp:,}/{challenger_beast_obj.stats.max_hp:,} HP`\n\n"
        + f"### {opponent_beast_obj.name}\n" +
        f"{opponent_health_bar} `{opponent_hp_percent}%`\n" +
        f"`{opponent_final_hp:,}/{opponent_beast_obj.stats.max_hp:,} HP`",
        inline=False)

    # Dynamic rewards section
    if winner_user:
        embed.add_field(name="🎁 **SPOILS OF WAR**",
                        value="```diff\n" + "+ Victory Glory Earned\n" +
                        "+ Battle Experience +XP\n" +
                        "+ Win Streak Updated\n" + "```",
                        inline=True)

        embed.add_field(name="💔 **BATTLE SCARS**",
                        value="```diff\n" + "- Beast Requires Healing\n" +
                        "- Defeat Recorded\n" +
                        "- Comeback Training Needed\n" + "```",
                        inline=True)
    else:
        embed.add_field(name="🏛️ **HALL OF HONOR**",
                        value="```yaml\n" + "Status: Mutual Respect\n" +
                        "Result: Experience Gained\n" +
                        "Future: Rematch Pending\n" + "```",
                        inline=False)

    # Premium footer with arena branding
    embed.add_field(
        name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
        value=
        f"⚔️ **IMMORTAL BEAST ARENA** • Battle #{challenger_user.total_battles:04d} • {ctx.guild.name}\n"
        +
        f"💡 *Use `!heal` to restore your beast • `!beasts` to view collection*\n"
        + f"🏟️ *Next battle awaits in the arena...*",
        inline=False)

    # Set author and timestamp for premium feel
    embed.set_author(
        name=
        f"Battle Report: {ctx.author.display_name} vs {opponent.display_name}",
        icon_url=ctx.author.display_avatar.url if hasattr(
            ctx.author, 'display_avatar') else None)

    embed.timestamp = discord.utils.utcnow()

    await ctx.send(embed=embed)