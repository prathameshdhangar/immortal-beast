   # Let opponent select their beast
    opponent_beast = await select_beast_for_battle(
        ctx, opponent, opponent_beasts, f"{opponent.display_name}'s")
    if not opponent_beast:
        embed = discord.Embed(color=0xDDA0DD)
        embed.add_field(name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        value="# 👤 ⚔️ **IMMORTAL BEAST ARENA** ⚔️ 👤\n" +
                        "## 😞 **OPPONENT WITHDREW** 😞\n" +
                        "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
                        inline=False)
        embed.add_field(name="🏃 **Battle Withdrawal**",
                        value=f"```yaml\n" +
                        f"Challenger: {ctx.author.display_name}\n" +
                        f"Opponent: {opponent.display_name}\n" +
                        f"Status: Opponent didn't select a beast\n" +
                        f"Result: Battle cancelled\n" + f"```",
                        inline=False)
        embed.add_field(
            name="🤔 **What Happened?**",
            value=f"⏰ **{opponent.display_name}** was asked to select a beast\n"
            + "📱 They didn't respond within 30 seconds\n" +
            "🚫 The battle was automatically cancelled\n" +
            "💭 They might be busy or away from keyboard",
            inline=False)
        embed.add_field(
            name="🔄 **Next Steps**",
            value=f"💬 **Message them** to arrange a better time\n" +
            f"🎯 **Try again later** when they're more active\n" +
            f"👥 **Find another opponent** who's ready to battle\n" +
            f"📊 Check `{ctx.bot.config.prefix}leaderboard` for active players",
            ansi\n" +
        f"\u001b[1;36m{challenger_beast_obj.name}\u001b[0m {challenger_beast_obj.rarity.emoji}\n" +
        f"Level: {challenger_beast_obj.stats.level} | Power: {challenger_beast_obj.power_level:,}\n" +
        f"ATK: {challenger_beast_obj.stats.attack} | DEF: {challenger_beast_obj.stats.defense} | SPD: {challenger_beast_obj.stats.speed}\n" +
        f"```\n" + f"### 🔴 {opponent.display_name}'s Champion\n" +
        f"```ansi\n" +
        f"\u001b[1;31m{opponent_beast_obj.name}\u001b[0m {opponent_beast_obj.rarity.emoji}\n" +
        f"Level: {opponent_beast_obj.stats.level} | Power: {opponent_beast_obj.power_level:,}\n" +
        f"ATK: {opponent_beast_obj.stats.attack} | DEF: {opponent_beast_obj.stats.defense} | SPD: {opponent_beast_obj.stats.speed}\n" +
        f"```",
        inline=False)

    # Battle analytics with enhanced visuals
    battle_intensity = "🔥🔥🔥" if battle_result[
        'turns'] > 15 else "🔥🔥" if battle_result['turns'] > 8 else "🔥"
    battle_type = "LEGENDARY EPIC" if battle_result[
        'turns'] > 20 else "EPIC CLASH" if battle_result[
            'turns'] > 12 else "QUICK STRIKE" if battle_result[
                'turns'] <= 5 else "STANDARD DUEL"

    embed.add_field(name="📊 **BATTLE ANALYTICS**",
                    value=f"```yaml\n" + f"Battle Type: {battle_type}\n" +
                    f"Intensity:  {battle_intensity}\n" +
                    f"Duration:   {battle_result['turns']} rounds\n" +
                    f"Combat ID:  #{challenger_user.total_battles:04d}\n" +
                    f"```",
                    inline=True)

    # Championship results
    if winner_user:
        winner_beast = battle_result['winner']
        winner_hp = battle_result['final_hp'][winner_beast]

        embed.add_field(
            name="👑 **CHAMPION**",
            value=f"```diff\n" + f"+ {winner_user.display_name}\n" +
            f"+ {winner_beast}\n" + f"+ {winner_hp} HP Remaining\n" +
            f"```\n" + f"🏆 **Victory Achieved!**",
            inline=True)
    else:
        embed.add_field(name="⚖️ **STALEMATE**",
                        value=f"```css\n" + "[Both Warriors Stand]\n" +
                        "[Honor Preserved]\n" + "[Rematch Awaited]\n" +
                        f"```\n" + f"🤝 **Honorable Draw**",
                        inline=True)

    # Advanced health visualization
    def create_premium_health_bar(current_hp, max_hp, length=8):
        if max_hp == 0:
            return "💀" * length

        percentage = current_hp / max_hp
        filled = int(percentage * length)

        if percentage > 0.7:
            bar_char = "🟢"
        elif percentage > 0.4:
            bar_char = "🟡"
        elif percentage > 0.1:
            bar_char = "🟠"
        else:
            bar_char = "🔴"

        if current_hp <= 0:
            return "💀" * length

        empty_char = "⬛"
        return bar_char * filled + empty_char * (length - filled)

    challenger_final_hp = battle_result['final_hp'][challenger_beast_obj.name]
    opponent_final_hp = battle_result['final_hp'][opponent_beast_obj.name]

    challenger_health_bar = create_premium_health_bar(
        challenger_final_hp, challenger_beast_obj.stats.max_hp)
    opponent_health_bar = create_premium_health_bar(
        opponent_final_hp, opponent_beast_obj.stats.max_hp)

    challenger_hp_percent = int(
        (challenger_final_hp / challenger_beast_obj.stats.max_hp) *
        100) if challenger_beast_obj.stats.max_hp > 0 else 0
    opponent_hp_percent = int(
        (opponent_final_hp / opponent_beast_obj.stats.max_hp) *
        100) if opponent_beast_obj.stats.max_hp > 0 else 0

    embed.add_field(
        name="❤️ **POST-BATTLE STATUS**",
        value=f"### {challenger_beast_obj.name}\n" +
        f"{challenger_health_bar} `{challenger_hp_percent}%`\n" +
        f"`{challenger_final_hp:,}/{challenger_beast_obj.stats.max_hp:,} HP`\n\n"
        + f"### {opponent_beast_obj.name}\n" +
        f"{opponent_health_bar} `{opponent_hp_percent}%`\n" +
        f"`{opponent_final_hp:,}/{opponent_beast_obj.stats.max_hp:,} HP`",
        inline=False)

    # Dynamic rewards section
    if winner_user:
        embed.add_field(name="🎁 **SPOILS OF WAR**",
                        value="```diff\n" + "+ Victory Glory Earned\n" +
                        "+ Battle Experience +XP\n" +
                        "+ Win Streak Updated\n" + "```",
                        inline=True)

        embed.add_field(name="💔 **BATTLE SCARS**",
                        value="```diff\n" + "- Beast Requires Healing\n" +
                        "- Defeat Recorded\n" +
                        "- Comeback Training Needed\n" + "```",
                        inline=True)
    else:
        embed.add_field(name="🏛️ **HALL OF HONOR**",
                        value="```yaml\n" + "Status: Mutual Respect\n" +
                        "Result: Experience Gained\n" +
                        "Future: Rematch Pending\n" + "```",
                        inline=False)

    # Premium footer with arena branding
    embed.add_field(
        name="━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
        value=
        f"⚔️ **IMMORTAL BEAST ARENA** • Battle #{challenger_user.total_battles:04d} • {ctx.guild.name}\n"
        +
        f"💡 *Use `!heal` to restore your beast • `!beasts` to view collection*\n"
        + f"🏟️ *Next battle awaits in the arena...*",
        inline=False)

    # Set author and timestamp for premium feel
    embed.set_author(
        name=
        f"Battle Report: {ctx.author.display_name} vs {opponent.display_name}",
        icon_url=ctx.author.display_avatar.url if hasattr(
            ctx.author, 'display_avatar') else None)

    embed.timestamp = discord.utils.utcnow()

    await ctx.send(embed=embed)